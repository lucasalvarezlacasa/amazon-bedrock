import json
import logging
import os
from abc import ABC
from typing import Any

from botocore.client import BaseClient
from botocore.eventstream import EventStream
from botocore.exceptions import ClientError

from src.dto import InvokeModelDto, ConverseModelDto

logger = logging.getLogger(__name__)


class BedrockBaseWrapper(ABC):
    def __init__(self, bedrock_client: BaseClient) -> None:
        """
        :param bedrock_client: A Boto3 Amazon Bedrock client.
        """
        self._bedrock_client: BaseClient = bedrock_client


class BedrockSTSWrapper(BedrockBaseWrapper):
    def get_credentials(self) -> tuple[str, str, str]:
        """
        Get nre credentials for Bedrock usage, by making your user assume a certain role.
        """
        response = self._bedrock_client.assume_role(
            RoleArn=f"arn:aws:iam::{os.environ['AWS_ACCOUNT_ID']}:role/{os.environ['AWS_ROLE_ID']}",
            RoleSessionName="my-own-client",
            DurationSeconds=int(os.environ["AWS_SESSION_TOKEN_TIMEOUT"]),
        )

        # Extract temporary credentials
        credentials: dict[str, Any] = response["Credentials"]
        return credentials["AccessKeyId"], credentials["SecretAccessKey"], credentials["SessionToken"]


class BedrockWrapper(BedrockBaseWrapper):
    def get_foundation_model(self, model_identifier: str) -> dict[str, Any]:
        """
        Get details about an Amazon Bedrock foundation model.
        :param model_identifier: The model's identifier.
        :return: The foundation model's details.
        """
        try:
            return dict(self._bedrock_client.get_foundation_model(modelIdentifier=model_identifier)["modelDetails"])
        except ClientError:
            logger.error(f"Couldn't get foundation model details for {model_identifier}")
            raise

    def list_foundation_models(self) -> list[dict]:
        """
        List the available Amazon Bedrock foundation models.
        :return: The list of available Bedrock foundation models.
        """
        try:
            response: dict[str, Any] = self._bedrock_client.list_foundation_models()
            models: list[dict] = response["modelSummaries"]
            logger.info("Got %s foundation models.", len(models))
            return models
        except ClientError:
            logger.error("Couldn't list foundation models.")
            raise


class BedrockRuntimeWrapper(BedrockWrapper):
    def invoke_model(self, model_id: str, invocation_dto: InvokeModelDto) -> str:
        """
        Invoke an Amazon Bedrock foundation model to generate a response.
        :param model_id: The ID of the model to invoke.
        :param invocation_dto: The dictionary with invocation params.
        :return: The response generated by the model
        """
        try:
            response = self._bedrock_client.invoke_model(modelId=model_id, body=json.dumps(invocation_dto.model_dump()))
            model_response = json.loads(response["body"].read())
            return str(model_response["generation"])
        except (ClientError, Exception) as e:
            logger.error(f"Couldn't invoke model '{model_id}'. Reason: {e}")
            raise

    def invoke_model_with_stream(self, model_id: str, invocation_dto: InvokeModelDto) -> EventStream:
        """
        Invoke an Amazon Bedrock foundation model to generate a response with streaming.
        :param model_id: The ID of the model to invoke.
        :param invocation_dto: The dictionary with invocation params.
        :return: The EventStream with the chunks
        """
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-runtime/client/invoke_model_with_response_stream.html#invoke-model-with-response-stream
        try:
            response = self._bedrock_client.invoke_model_with_response_stream(
                modelId=model_id, body=json.dumps(invocation_dto.model_dump())
            )
            return response["body"]
        except (ClientError, Exception) as e:
            logger.error(f"Couldn't invoke model '{model_id}'. Reason: {e}")
            raise

    def converse_model(self, model_id: str, converse_dto: ConverseModelDto) -> str:
        """
        Converse with an Amazon Bedrock foundation model to generate a response.
        :param model_id: The ID of the model to invoke.
        :param converse_dto: The dictionary with converse information.
        :return: The response generated by the model
        """
        try:
            response = self._bedrock_client.converse(modelId=model_id, **converse_dto.to_client_payload())
            return str(response["output"]["message"]["content"][0]["text"])
        except (ClientError, Exception) as e:
            logger.error(f"Couldn't invoke model '{model_id}'. Reason: {e}")
            raise

    def converse_model_with_stream(self, model_id: str, converse_dto: ConverseModelDto) -> EventStream:
        """
        Converse with an Amazon Bedrock foundation model to generate a response, using streaming.
        :param model_id: The ID of the model to invoke.
        :param converse_dto: The dictionary with converse information.
        :return: The EventStream with the chunks
        """
        try:
            response: EventStream = self._bedrock_client.converse_stream(
                modelId=model_id, **converse_dto.to_client_payload()
            )
            return response["stream"]
        except (ClientError, Exception) as e:
            logger.error(f"Couldn't invoke model '{model_id}'. Reason: {e}")
            raise
